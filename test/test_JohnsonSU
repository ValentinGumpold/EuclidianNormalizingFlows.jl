using EuclidianNormalizingFlows
using Test

using ForwardDiff

using EuclidianNormalizingFlows: JohnsonSU, johnsontrafo, johnsontrafo_inv, johnsontrafo_ladj, johnsontrafo_inv_ladj


@testset "JohnsonSU" begin
    K = rand(Normal(), 10^6)
    K_joh = johnsontrafo_inv.(JohnsonSU(-15,6.5,0,2.5), K);
    X = rand(JohnsonSU(-15,6.5,0,2.5), 10^6);

    @test isapprox(@inferredsum(abs.(sort(K_joh)))/10^6, sum(abs.(sort(X)))/10^6, rtol = 0.01)
    
    @test @inferred(johnsontrafo(JohnsonSU(), 1)) isa Float64
    @test @inferred(johnsontrafo_inv(JohnsonSU(), 1)) isa Float64

    @test johnsontrafo(JohnsonSU(1, 3, -4, 0.5), 0.3) ≈ 9.544817734776984
    @test johnsontrafo_inv(JohnsonSU(1, 3, -4, 0.5), 0.3) ≈ -4.1177281942392545

    Z = johnsontrafo_inv.(JohnsonSU(-2,1,0,2.5), K)
    Z_reco = johnsontrafo.(JohnsonSU(-2,1,0,2.5), Z)
    @test K ≈ Z_reco
    
    Y = JohnsonSU(1, 1.5, 2, 4)
    X_reco = center_contract.(Y, 7, 2, 4)
    @test X ≈ X_reco

    @test isapprox(@inferred(johnsontrafo_ladj(JohnsonSU(4.2, 4, 2, 3)), 0.5), log(abs(ForwardDiff.derivative(x -> johnsontrafo(JohnsonSU(4.2, 4, 2, 3)), 0.5))), rtol = 0.01)
    @test isapprox(@inferred(johnsontrafo_inv_ladj(JohnsonSU(4.2, 4, 2, 3)), 0.5), log(abs(ForwardDiff.derivative(x -> johnsontrafo_inv(JohnsonSU(4.2, 4, 2, 3)), 0.5))), rtol = 0.01)

    @test @inferred(JohnsonSU(4, 2, 3, 1)) isa JohnsonSU
end
